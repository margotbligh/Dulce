data = Dulce_trimIsotopes(data, rtmin=rtmin, rtmax=rtmax)
if (return_everything){data_list$data_trimIsotopes = data}
} else {
message("Dulce warning: 'data' not from 'xsAnnotate' class.")
message("Dulce warning: trying next step in pipeline, Dulce_annotate()")
}
if (class(data)=="data.frame"){
message("Dulce note: executing Dulce_annotate function. Wooosh! Birupipa!")
data = Dulce_annotate(data, pgp=pgp, ppm=ppm, mzabs=mzabs)
if (return_everything){data_list$data_annotate = data}
} else {
message("Dulce warning: 'data' not even from 'data.frame' class. What did you give me?")
}
if (return_everything){
message("Dulce note: returning a list with the product of every step I was able to do successfully.")
return(data_list)
}
message("Dulce note: returning the last object I was able to produce.")
return(data)
}
#'
#' @export
#'
#' @details Dobie dobie doo diroo diroo
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#'
Dulce_AnnotateMS1 = function(data, cwp=NULL, pdp=NULL,
names=NULL, classes="Unclassified",
isotopes=T, adducts=T,
perfwhm=0.5, mzabs.find=0.01, cor_eic_th=0.75,
polarity=NULL,
rtmin=0, rtmax=Inf,
pgp=NULL, ppm=NULL, mzabs=NULL,
return_everything=F){
data_list = list()
if (class(data) %in% c("OnDiskMSnExp","MSnExp")){
message("Dulce note: executing Dulce_fetch function. Bip Bop... Bip Bop...")
data = Dulce_fetch(data, cwp=cwp, pdp=pdp, return_everything=return_everything)
if (return_everything){
data_list$data_peaks = data$peaks
data_list$data_features = data$features
data_list$data_fetch = data$data
data = data$data
}
} else {
message("Dulce warning: 'data' not from 'OnDiskMSnExp' or 'MSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_to_xcmsSet().")
}
if (class(data)=="XCMSnExp"){
message("Dulce note: executing Dulce_to_xcmsSet function. Diroo... Diroo Diroo... ")
data = Dulce_to_xcmsSet(data, names, classes)
if (return_everything){data_list$data_xcmsSet = data}
} else {
message("Dulce warning: 'data' not from 'XCMSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_find()")
}
if (class(data)=="xcmsSet"){
message("Dulce note: executing Dulce_find function. Daroo bip... daroo bop... ")
message("Dulce rants: I dont like this functions :c It needs to be improved.")
data = Dulce_find(data, isotopes=isotopes, adducts=adducts,
perfwhm=perfwhm, mzabs=mzabs.find, cor_eic_th=cor_eic_th,
polarity=polarity)
if (return_everything){data_list$data_find = data}
} else {
message("Dulce warning: 'data' not from 'xcmsSet' class.")
message("Dulce warning: trying next step in pipeline, Dulce_trimIsotopes()")
}
if (class(data)=="xsAnnotate"){
message("Dulce note: executing Dulce_trimIsotopes function. Beep... clink...")
data = Dulce_trimIsotopes(data, rtmin=rtmin, rtmax=rtmax)
if (return_everything){data_list$data_trimIsotopes = data}
} else {
message("Dulce warning: 'data' not from 'xsAnnotate' class.")
message("Dulce warning: trying next step in pipeline, Dulce_annotate()")
}
if (class(data)=="data.frame"){
message("Dulce note: executing Dulce_annotate function. Wooosh! Birupipa!")
data = Dulce_annotate(data, pgp=pgp, ppm=ppm, mzabs=mzabs)
if (return_everything){data_list$data_annotate = data}
} else {
message("Dulce warning: 'data' not even from 'data.frame' class. What did you give me?")
}
if (return_everything){
message("Dulce note: returning a list with the product of every step I was able to do successfully.")
return(data_list)
}
message("Dulce note: returning the last object I was able to produce.")
return(data)
}
a = Dulce_AnnotateMS1(1, polarity="negative")
data = Dulce_AnnotateMS1(1, polarity="negative", ppm=10)
# Sample code -------------------------------------------------------------
file.paths = dir(path="mzML_example3", all.files=F, full.names=T)
pheno.data = data.frame(name=basename(file.paths) %>%
gsub(pat="MS31_20220203_|_\\d{2}.mzML|_100xdilute",
rep=""),
sampletype1=basename(file.paths) %>%
gsub(pat=".*blank.*",
rep="blank") %>%
gsub(pat=".*lam.*",
rep="laminarin") %>%
gsub(pat=".*yeastmannan.*",
rep="yeastmannan"),
sampletype2=basename(file.paths) %>%
gsub(pat=".*blank.*",
rep="blank") %>%
gsub(pat=".*lam_omix.*|.*gh76.*",
rep="positive control") %>%
gsub(pat=".*fitdog.*",
rep="sample"),
rep=basename(file.paths) %>%
gsub(pat=".*rep2.*|.*-2-.*",
rep="B") %>%
gsub(pat=".*rep1.*|.*-1-.*",
rep="A"))
pheno.data = pheno.data[c(1,2),]
file.paths = file.paths[c(1,2)]
data = readMSData(files=file.paths,
pdata=new("NAnnotatedDataFrame", pheno.data),
mode="onDisk")
data = Dulce_AnnotateMS1(data, polarity="negative", ppm=10)
devtools::document()
#' @details
#' Dobie dobie doo diroo diroo
#'
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#' xcms::CentWaveParam()
#'
Dulce_fetch = function(data,
cwp=NULL,
pdp=NULL,
return_everything=F){
if (!class(data) %in% c("OnDiskMSnExp","MSnExp")){
stop("Dulce error: 'data' is not from 'OnDiskMSnExp' or 'MSnExp' class. Check for ?readMSData.")
}
# If no param objects defined, default is used.
if (is.null(cwp)){cwp = CentWaveParam()}
else if (!is.null(cwp) & class(cwp)!="CentWaveParam"){
stop("Dulce error: 'cwp' is not an 'CentWaveParam' object.
Check for ?CentWaveParam or set it as NULL to use default arguments.")}
if (is.null(pdp)){pdp = PeakDensityParam(sampleGroups=rep("Ungrouped", nrow(data)))}
else if (class(pdp)!="PeakDensityParam"){
stop("Dulce error: 'pdp' is not an 'PeakDensityParam' object. Check for ?PeakDensityParam or set it as NULL to use default arguments.")}
# Defining a default "Ungrouped" category if no grouping is defined.
if (length(pdp@sampleGroups)==0){
pdp@sampleGroups = rep("Ungrouped", nrow(data))
message("Dulce warning: No sample groups were defined. One group under the name of 'Ungrouped' will be created.")}
# Fetch
suppressMessages({
processed_data = findChromPeaks(data, param=cwp) %>% groupChromPeaks(param=pdp)
})
message("Peaks picked and grouped!")
if (return_everything){
peaks_data = as.data.frame(processed_data@msFeatureData[["chromPeaks"]])
features_data = as.data.frame(processed_data@msFeatureData[["featureDefinitions"]])
return(list(data=processed_data,
peaks=peaks_data,
features=features_data))
}
return(processed_data)
}
data = Dulce_AnnotateMS1(data, polarity="negative", ppm=10)
#'
#' @export
#'
#' @details Dobie dobie doo diroo diroo
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#'
Dulce_AnnotateMS1 = function(data, cwp=NULL, pdp=NULL,
names=NULL, classes="Unclassified",
isotopes=T, adducts=T,
perfwhm=0.5, mzabs.find=0.01, cor_eic_th=0.75,
polarity=NULL,
rtmin=0, rtmax=Inf,
pgp=NULL, ppm=NULL, mzabs=NULL,
return_everything=F){
data_list = list()
register(SerialParam())
if (class(data) %in% c("OnDiskMSnExp","MSnExp")){
message("Dulce note: executing Dulce_fetch function. Bip Bop... Bip Bop...")
data = Dulce_fetch(data, cwp=cwp, pdp=pdp, return_everything=return_everything)
if (return_everything){
data_list$data_peaks = data$peaks
data_list$data_features = data$features
data_list$data_fetch = data$data
data = data$data
}
} else {
message("Dulce warning: 'data' not from 'OnDiskMSnExp' or 'MSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_to_xcmsSet().")
}
if (class(data)=="XCMSnExp"){
message("Dulce note: executing Dulce_to_xcmsSet function. Diroo... Diroo Diroo... ")
data = Dulce_to_xcmsSet(data, names, classes)
if (return_everything){data_list$data_xcmsSet = data}
} else {
message("Dulce warning: 'data' not from 'XCMSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_find()")
}
if (class(data)=="xcmsSet"){
message("Dulce note: executing Dulce_find function. Daroo bip... daroo bop... ")
message("Dulce rants: I dont like this functions :c It needs to be improved.")
data = Dulce_find(data, isotopes=isotopes, adducts=adducts,
perfwhm=perfwhm, mzabs=mzabs.find, cor_eic_th=cor_eic_th,
polarity=polarity)
if (return_everything){data_list$data_find = data}
} else {
message("Dulce warning: 'data' not from 'xcmsSet' class.")
message("Dulce warning: trying next step in pipeline, Dulce_trimIsotopes()")
}
if (class(data)=="xsAnnotate"){
message("Dulce note: executing Dulce_trimIsotopes function. Beep... clink...")
data = Dulce_trimIsotopes(data, rtmin=rtmin, rtmax=rtmax)
if (return_everything){data_list$data_trimIsotopes = data}
} else {
message("Dulce warning: 'data' not from 'xsAnnotate' class.")
message("Dulce warning: trying next step in pipeline, Dulce_annotate()")
}
if (class(data)=="data.frame"){
message("Dulce note: executing Dulce_annotate function. Wooosh! Birupipa!")
data = Dulce_annotate(data, pgp=pgp, ppm=ppm, mzabs=mzabs)
if (return_everything){data_list$data_annotate = data}
} else {
message("Dulce warning: 'data' not even from 'data.frame' class. What did you give me?")
}
if (return_everything){
message("Dulce note: returning a list with the product of every step I was able to do successfully.")
return(data_list)
}
message("Dulce note: returning the last object I was able to produce.")
return(data)
}
data = Dulce_AnnotateMS1(data, polarity="negative", ppm=10)
#'
#' @export
#'
#' @details Dobie dobie doo diroo diroo
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#'
Dulce_annotate = function(data, pgp=NULL,
ppm=NULL, mzabs=NULL){
if (!all(c("mzmin","mzmax") %in% colnames(data))){
stop("Dulce error: check if 'mzmin' and 'mzmax' are columns in the 'data' object. They are needed to overlap the predictions.")
}
if (is.null(ppm) & is.null(mzabs)){stop("Dulce error: 'ppm' and 'mzabs' have NULL values. Please specify one.")}
if ((!is.null(ppm) & !is.null(mzabs))){
message("Dulce warning: 'ppm' and 'mzabs' were specified (it is one or the other, not both). Using only 'ppm'")
mzabs = NULL
}
if (is.null(pgp)){pgp = predictGlycansParam()}
else if (!is.null(pgp) & class(pgp)!="predictGlycansParam"){
stop("Dulce error: 'cwp' is not an 'predictGlycansParam' object. Check for ?predictGlycansParam or set it as NULL to use default arguments.")}
predicted = predictGlycans(param=pgp) %>%
pivot_longer(-c(name, dp, mass, formula), names_to = "ion", values_to = "mz") %>%
drop_na()
if (!is.null(mzabs)){
predicted = predicted %>% mutate(mzmin=mz-mzabs,
mzmax=mz+mzabs)
} else if (!is.null(ppm)){
predicted = predicted %>% mutate(mzmin=mz-ppm_to_mz(mz, ppm),
mzmax=mz+ppm_to_mz(mz, ppm))
}
setDT(predicted)
setDT(data)
setkey(predicted, mzmin, mzmax)
predicted = foverlaps(data,predicted) %>% drop_na(name) %>%
dplyr::select(-i.mzmin, -i.mzmax) %>% as.data.frame()
return(predicted)
}
data = Dulce_AnnotateMS1(data, polarity="negative", ppm=10)
View(data)
#'
#' @export
#'
#' @details Dobie dobie doo diroo diroo
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#'
Dulce_AnnotateMS1 = function(data, cwp=NULL, pdp=NULL,
names=NULL, classes="Unclassified",
isotopes=T, adducts=T,
perfwhm=0.5, mzabs.find=0.01, cor_eic_th=0.75,
polarity=NULL,
rtmin=0, rtmax=Inf,
pgp=NULL, ppm=NULL, mzabs=NULL,
return_everything=F){
data_list = list()
register(SerialParam())
if (class(data) %in% c("OnDiskMSnExp","MSnExp")){
message("Dulce note: executing Dulce_fetch function. Bip Bop... Bip Bop...")
data = Dulce_fetch(data, cwp=cwp, pdp=pdp, return_everything=return_everything)
if (return_everything){
data_list$data_peaks = data$peaks
data_list$data_features = data$features
data_list$data_fetch = data$data
data = data$data
}
} else {
message("Dulce warning: 'data' not from 'OnDiskMSnExp' or 'MSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_to_xcmsSet().")
}
if (class(data)=="XCMSnExp"){
message("Dulce note: executing Dulce_to_xcmsSet function. Diroo... Diroo Diroo... ")
data = Dulce_to_xcmsSet(data, names, classes)
if (return_everything){data_list$data_xcmsSet = data}
} else {
message("Dulce warning: 'data' not from 'XCMSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_find()")
}
if (class(data)=="xcmsSet"){
message("Dulce note: executing Dulce_find function. Daroo bip... daroo bop... ")
message("Dulce rants: I dont like this functions :c It needs to be improved.")
data = Dulce_find(data, isotopes=isotopes, adducts=adducts,
perfwhm=perfwhm, mzabs=mzabs.find, cor_eic_th=cor_eic_th,
polarity=polarity)
if (return_everything){data_list$data_find = data}
} else {
message("Dulce warning: 'data' not from 'xcmsSet' class.")
message("Dulce warning: trying next step in pipeline, Dulce_trimIsotopes()")
}
if (class(data)=="xsAnnotate"){
message("Dulce note: executing Dulce_trimIsotopes function. Beep... clink...")
data = Dulce_trimIsotopes(data, rtmin=rtmin, rtmax=rtmax)
if (return_everything){data_list$data_trimIsotopes = data}
} else {
message("Dulce warning: 'data' not from 'xsAnnotate' class.")
message("Dulce warning: trying next step in pipeline, Dulce_annotate()")
}
if (class(data)=="data.frame"){
message("Dulce note: executing Dulce_annotate function. Wooosh! Birup... Birup... pa!")
data = Dulce_annotate(data, pgp=pgp, ppm=ppm, mzabs=mzabs)
if (return_everything){data_list$data_annotate = data}
} else {
message("Dulce warning: 'data' not even from 'data.frame' class. What did you give me?")
}
if (return_everything){
message("Dulce note: returning a list with the product of every step I was able to do successfully.")
return(data_list)
}
message("Dulce note: returning the last object I was able to produce.")
return(data)
}
data = Dulce_AnnotateMS1(data, polarity="negative", ppm=10, return_everything = T)
View(data)
#'
#' @export
#'
#' @details Dobie dobie doo diroo diroo
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#'
Dulce_annotate = function(data, pgp=NULL,
ppm=NULL, mzabs=NULL){
if (!all(c("mzmin","mzmax") %in% colnames(data))){
stop("Dulce error: check if 'mzmin' and 'mzmax' are columns in the 'data' object. They are needed to overlap the predictions.")
}
if (is.null(ppm) & is.null(mzabs)){stop("Dulce error: 'ppm' and 'mzabs' have NULL values. Please specify one.")}
if ((!is.null(ppm) & !is.null(mzabs))){
message("Dulce warning: 'ppm' and 'mzabs' were specified (it is one or the other, not both). Using only 'ppm'")
mzabs = NULL
}
if (is.null(pgp)){pgp = predictGlycansParam()}
else if (!is.null(pgp) & class(pgp)!="predictGlycansParam"){
stop("Dulce error: 'cwp' is not an 'predictGlycansParam' object. Check for ?predictGlycansParam or set it as NULL to use default arguments.")}
predicted = predictGlycans(param=pgp) %>%
pivot_longer(-c(name, dp, mass, formula), names_to = "ion", values_to = "mz") %>%
drop_na()
if (!is.null(mzabs)){
predicted = predicted %>% mutate(mzmin=mz-mzabs,
mzmax=mz+mzabs)
} else if (!is.null(ppm)){
predicted = predicted %>% mutate(mzmin=mz-ppm_to_mz(mz, ppm),
mzmax=mz+ppm_to_mz(mz, ppm))
}
setDT(predicted)
setDT(data)
setkey(predicted, mzmin, mzmax)
predicted = foverlaps(data,predicted) %>% drop_na(name) %>%
dplyr::select(-i.mzmin, -i.mzmax, -i.mz) %>% as.data.frame()
return(predicted)
}
# Sample code -------------------------------------------------------------
file.paths = dir(path="mzML_example3", all.files=F, full.names=T)
pheno.data = data.frame(name=basename(file.paths) %>%
gsub(pat="MS31_20220203_|_\\d{2}.mzML|_100xdilute",
rep=""),
sampletype1=basename(file.paths) %>%
gsub(pat=".*blank.*",
rep="blank") %>%
gsub(pat=".*lam.*",
rep="laminarin") %>%
gsub(pat=".*yeastmannan.*",
rep="yeastmannan"),
sampletype2=basename(file.paths) %>%
gsub(pat=".*blank.*",
rep="blank") %>%
gsub(pat=".*lam_omix.*|.*gh76.*",
rep="positive control") %>%
gsub(pat=".*fitdog.*",
rep="sample"),
rep=basename(file.paths) %>%
gsub(pat=".*rep2.*|.*-2-.*",
rep="B") %>%
gsub(pat=".*rep1.*|.*-1-.*",
rep="A"))
pheno.data = pheno.data[c(1,2),]
file.paths = file.paths[c(1,2)]
data = readMSData(files=file.paths,
pdata=new("NAnnotatedDataFrame", pheno.data),
mode="onDisk")
data = Dulce_AnnotateMS1(data, polarity="negative", ppm=10, return_everything = T)
#'
#' @export
#'
#' @details Dobie dobie doo diroo diroo
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#'
Dulce_AnnotateMS1 = function(data, cwp=NULL, pdp=NULL,
names=NULL, classes="Unclassified",
isotopes=T, adducts=T,
perfwhm=0.5, mzabs.find=0.01, cor_eic_th=0.75,
polarity=NULL,
rtmin=0, rtmax=Inf,
pgp=NULL, ppm=NULL, mzabs=NULL,
return_everything=F){
data_list = list()
register(SerialParam())
if (class(data) %in% c("OnDiskMSnExp","MSnExp")){
message("Dulce note: executing Dulce_fetch function. Bip Bop... Bip Bop...")
data = Dulce_fetch(data, cwp=cwp, pdp=pdp, return_everything=return_everything)
if (return_everything){
data_list$data_peaks = data$peaks
data_list$data_features = data$features
data_list$data_fetch = data$data
data = data$data
}
} else {
message("Dulce warning: 'data' not from 'OnDiskMSnExp' or 'MSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_to_xcmsSet().")
}
if (class(data)=="XCMSnExp"){
message("Dulce note: executing Dulce_to_xcmsSet function. Diroo... Diroo Diroo... ")
data = Dulce_to_xcmsSet(data, names, classes)
if (return_everything){data_list$data_xcmsSet = data}
} else {
message("Dulce warning: 'data' not from 'XCMSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_find()")
}
if (class(data)=="xcmsSet"){
message("Dulce note: executing Dulce_find function. Daroo bip... daroo bop... ")
message("Dulce rants: I dont like this functions :c It needs to be improved.")
data = Dulce_find(data, isotopes=isotopes, adducts=adducts,
perfwhm=perfwhm, mzabs=mzabs.find, cor_eic_th=cor_eic_th,
polarity=polarity)
if (return_everything){data_list$data_find = data}
} else {
message("Dulce warning: 'data' not from 'xcmsSet' class.")
message("Dulce warning: trying next step in pipeline, Dulce_trimIsotopes()")
}
if (class(data)=="xsAnnotate"){
message("Dulce note: executing Dulce_trimIsotopes function. Beep... clink...")
data = Dulce_trimIsotopes(data, rtmin=rtmin, rtmax=rtmax)
if (return_everything){data_list$data_trimIsotopes = data}
} else {
message("Dulce warning: 'data' not from 'xsAnnotate' class.")
message("Dulce warning: trying next step in pipeline, Dulce_annotate()")
}
if (class(data)=="data.frame"){
message("Dulce note: executing Dulce_annotate function. Wooosh! Birup... Birup... pa!")
data = Dulce_annotate(data, pgp=pgp, ppm=ppm, mzabs=mzabs)
if (return_everything){data_list$data_annotate = data}
} else {
message("Dulce warning: 'data' not even from 'data.frame' class. What did you give me?")
}
if (return_everything){
message("Dulce note: returning a list with the product of the steps I was able to do successfully.")
return(data_list)
}
message("Dulce note: returning the last object I was able to produce.")
return(data)
}
View(data)
setwd("C:/Users/ssilva/ownCloud/Lab rotations/R with Margot/Dulce")
devtools::document()
?Dulce
?Dulce_AnnotateMS1
