featureDefinition_filtered = featureDefinition[paste0(featureDefinition$mzmed,"_", featureDefinition$rtmed) %in%
paste0(data.ms1.annotated$i.mz,"_",data.ms1.annotated$rt),]
featureDefinitions(data.ms) = featureDefinition_filtered
ms2.spix = featureSpectra(data.ms, msLevel = 2, expandMz = 0.005, return.type = "Spectra")@backend@spectraData@rownames
ms2.fidx = names(featureSpectra(data.ms, msLevel = 2, expandMz = 0.005, return.type = "List"))
data.ms1.fetched = data.ms1$XCMSnExp
data.ms1.annotated = data.ms1$Annotated
features = data.ms1.fetched
annotation = data.ms1.annotated
features = data.ms1.fetched
annotation = data.ms1.annotated
chromPeaks(data) = chromPeaks(features)
featureDefinition = featureDefinitions(annotation)
annotation = data.ms1.annotated
featureDefinition = featureDefinitions(features)
featureDefinition_filtered = featureDefinition[paste0(featureDefinition$mzmed,"_", featureDefinition$rtmed) %in%
paste0(annotation$i.mz,"_",annotation$rt),]
featureDefinitions(data.ms) = featureDefinition_filtered
featureDefinitions(data) = featureDefinition_filtered
hd.ms2 = header(data)
hd.ms2.filtered = hd.ms2[rownames(hd.ms2) %in% ms2.spix,]
hd.ms2.filtered
data.ms2.filtered
data.ms2.filtered = data[data@featureData@data$spectrum %in% ms2.fidx]
data.ms2.filtered
data.ms2.filtered = spectra(data[data@featureData@data$spectrum %in% ms2.fidx])
data.ms2.filtered
hd.ms2 = header(data)
hd.ms2.filtered = hd.ms2[rownames(hd.ms2) %in% ms2.spix,]
data.ms2.filtered = spectra(data[data@featureData@data$spectrum %in% ms2.fidx])
data.ms2.filtered
rownames(hd.ms2)
ms2.spix
hd.ms2.filtered = hd.ms2[rownames(hd.ms2) %in% ms2.spix,]
hd.ms2.filtered
hd.ms2.filtered
data@featureData@data$spectrum %in% ms2.fidx
data[data@featureData@data$spectrum %in% ms2.fidx]
data = readMSData(files=file.paths,
pdata=new("NAnnotatedDataFrame", pheno.data),
mode="onDisk")
original_data = data
data = as(data, "XCMSnExp")
chromPeaks(data) = chromPeaks(features)
featureDefinition = featureDefinitions(features)
featureDefinition_filtered = featureDefinition[paste0(featureDefinition$mzmed,"_", featureDefinition$rtmed) %in%
paste0(annotation$i.mz,"_",annotation$rt),]
featureDefinitions(data) = featureDefinition_filtered
ms2.spix = featureSpectra(data, msLevel = 2, expandMz = 0.005, return.type = "Spectra")@backend@spectraData@rownames
ms2.fidx = names(featureSpectra(data, msLevel = 2, expandMz = 0.005, return.type = "List"))
hd.ms2 = header(data)
hd.ms2.filtered = hd.ms2[rownames(hd.ms2) %in% ms2.spix,]
data.ms2.filtered = spectra(original_data[original_data@featureData@data$spectrum %in% ms2.fidx])
data.ms2.filtered
original_data[original_data@featureData@data$spectrum %in% ms2.fidx]
ms2.fidx
original_data@featureData@data$spectrum
rm(original_data)
data = as(data, "XCMSnExp")
chromPeaks(data) = chromPeaks(features)
featureDefinition = featureDefinitions(features)
featureDefinition_filtered = featureDefinition[paste0(featureDefinition$mzmed,"_", featureDefinition$rtmed) %in%
paste0(annotation$i.mz,"_",annotation$rt),]
featureDefinitions(data) = featureDefinition_filtered
ms2.spix = featureSpectra(data, msLevel = 2, expandMz = 0.005, return.type = "Spectra")@backend@spectraData@rownames
ms2.fidx = names(featureSpectra(data, msLevel = 2, expandMz = 0.005, return.type = "List"))
hd.ms2 = header(data)
hd.ms2.filtered = hd.ms2[rownames(hd.ms2) %in% ms2.spix,]
data.ms2.filtered = spectra(data[data@featureData@data$spectrum %in% hd.ms2.filtered$spectrum])
data.ms2.filtered
metadata = data.frame(fidx=ms2.fidx, spidx=ms2.spix)
?Dulce_fetch
foo <- function() stop("hello")
bar <- function() 'world'
x <- tryCatch(
{
foo()
},
error = function(e){
bar()
}
)
x
x(
)
data <- log("ABC")
data
a <- log("ABC")
a
trycatch(log("ABC"), error=print("holly molly"))
tryCatch(log("ABC"), error=print("holly molly"))
tryCatch(log("ABC"), error=function(e) print("holly molly"))
a = "a"
tryCatch(log(a), error=function(e) print("holly molly"); a=1)
tryCatch(log(a), error=function(e) {print("holly molly"); a=1})
tryCatch(log(a), error=function(e) {a=1})
a
tryCatch(log(a), error=function(e) {1})
a = tryCatch(log(a), error=function(e) {1})
a = tryCatch(log(a), error=function(e) 1)
a
a = "a"
a = tryCatch(log(a), error=function(e) 1)
a
a = tryCatch(log(a), error=function(e) {print(paste0(a," not working") 1})
a = tryCatch(log(a), error=function(e) {print(paste0(a," not working"); 1})
a = tryCatch(log(a), error=function(e) {print(paste0(a," not working")); 1})
a = "a"
a = tryCatch(log(a), error=function(e) {print(paste0(a," not working")); 1})
a
a = tryCatch(log(a), error=function(e) {print(paste0(a," not working")) 1})
warning("a", ",", "A")
warning(a, "didnt work")
a = tryCatch(log(a), error=function(e) {warning(a, " did not work due to following error:\n", e); 1})
a = "a"
a = tryCatch(log(a), error=function(e) {warning(a, " did not work due to following error:\n", e); 1})
a = "a"
a = tryCatch(log(a), error=function(e) {stop(a, " did not work due to following error:\n", e); 1})
a
a = tryCatch(log(a), error=function(e) {1; stop(a, " did not work due to following error:\n", e)})
a
a = "a"
a = tryCatch(log(a), error=function(e) {1; stop(a, " did not work due to following error:\n", e)})
a = tryCatch(log(a), error=function(e) {1; warning(a, " did not work due to following error:\n", e)})
data = tryCatch(Dulce_fetch(data, cwp=cwp, pdp=pdp, return_everything=T),
error=function(e) {warning("Dulce_fetch() did not work due to following error:\n",
e,
"Last 'data' value will be returned"); data})
?Dulce_AnnotateMS1
a = "a"
a = tryCatch(log(a), error=function(e) {1; warning(a, " did not work due to following error:\n", e); b=T})
a
b
#'
#' @export
#'
#' @details Dobie dobie doo diroo diroo
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#'
Dulce_AnnotateMS1 = function(data, cwp=NULL, pdp=NULL,
names=NULL, classes="Unclassified",
isotopes=T, adducts=T,
perfwhm=0.5, mzabs.find=0.01, cor_eic_th=0.75,
polarity=NULL,
rtmin=0, rtmax=Inf,
pgp=NULL, ppm=NULL, mzabs=NULL,
output = "all"){
data_all = list()
data_main = list()
if (!output %in% c("all", "main", "last")){
stop("Dulce error: 'output' argument not recognized. The options are 'all', 'main' or 'last'. See ?Dulce_AnnotateMS1 for more information.")
}
BiocParallel::register(SerialParam())
if (class(data) %in% c("OnDiskMSnExp","MSnExp")){
message("Dulce note: executing Dulce_fetch function. Bip Bop... Bip Bop...")
data = tryCatch(Dulce_fetch(data, cwp=cwp, pdp=pdp, return_everything=T),
error=function(e) {warning("Dulce_fetch() did not work due to following error:\n", e); data})
if (output == "all"){
data_all$peaks = data$peaks
data_all$features = data$features
data_all$XCMSnExp = data$data
data = data$data
} else if (output == "main"){
data_main$XCMSnExp = data$data
data = data$data
} else if (output == "last"){
data = data$data
}
} else {
message("Dulce warning: 'data' not from 'OnDiskMSnExp' or 'MSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_to_xcmsSet().")
}
if (class(data)=="XCMSnExp"){
message("Dulce note: executing Dulce_to_xcmsSet function. Diroo... Diroo Diroo... ")
data = tryCatch(Dulce_to_xcmsSet(data, names, classes),
error=function(e) {warning("Dulce_to_xcms() did not work due to following error:\n", e); data})
if (output == "all"){data_all$xcmsSet = data}
} else {
message("Dulce warning: 'data' not from 'XCMSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_find()")
}
if (class(data)=="xcmsSet"){
message("Dulce note: executing Dulce_find function. Daroo bip... daroo bop... ")
message("Dulce rants: I dont like this functions :c It needs to be improved.")
data = tryCatch(Dulce_find(data, isotopes=isotopes, adducts=adducts,
perfwhm=perfwhm, mzabs=mzabs.find, cor_eic_th=cor_eic_th,
polarity=polarity),
error=function(e) {warning("Dulce_find() did not work due to following error:\n", e); data})
if (output == "all"){data_all$xsAnnotate = data}
} else {
message("Dulce warning: 'data' not from 'xcmsSet' class.")
message("Dulce warning: trying next step in pipeline, Dulce_trimIsotopes()")
}
if (class(data)=="xsAnnotate"){
message("Dulce note: executing Dulce_trimIsotopes function. Beep... clink...")
data = tryCatch(Dulce_trimIsotopes(data, rtmin=rtmin, rtmax=rtmax),
error=function(e) {warning("Dulce_trimIsotopes() did not work due to following error:\n", e); data})
if (output == "all"){data_all$trimmedIsotopes = data}
} else {
message("Dulce warning: 'data' not from 'xsAnnotate' class.")
message("Dulce warning: trying next step in pipeline, Dulce_annotate()")
}
if (class(data)=="data.frame"){
message("Dulce note: executing Dulce_annotate function. Wooosh! Birup... Birup... pa!")
data = tryCatch(Dulce_annotate(data, pgp=pgp, ppm=ppm, mzabs=mzabs),
error=function(e) {warning("Dulce_annotate() did not work due to following error:\n", e); data})
if (output == "all"){data_all$Annotated = data}
else if (output == "main"){data_main$Annotated = data}
} else {
message("Dulce warning: 'data' not even from 'data.frame' class. What did you give me?")
}
if (output == "all"){
message("Dulce note: returning a list with the product of all the steps I was able to do successfully.")
return(data_all)
} else if (output == "main"){
message("Dulce note: returning a list with an 'XCMSnExp' object (if possible) and the last achieved product.")
return(data_main)
} else if (output == "last"){
message("Dulce note: returning the last object I was able to produce.")
return(data)
}
}
View(data)
View(data)
library(tidyverse); library(xcms); library(CAMERA); library(glycanPredict)
library(data.table); library(Dulce)
# Import data -------------------------------------------------------------
file.paths = dir(path="C:/Users/ssilva/ownCloud/Lab rotations/R with Margot/Second week - diving deep into MS data/mzML_example3", all.files=F, full.names=T)
pheno.data = data.frame(name=basename(file.paths) %>%
gsub(pat="MS31_20220203_|_\\d{2}.mzML|_100xdilute",
rep=""),
sampletype1=basename(file.paths) %>%
gsub(pat=".*blank.*",
rep="blank") %>%
gsub(pat=".*lam.*",
rep="laminarin") %>%
gsub(pat=".*yeastmannan.*",
rep="yeastmannan"),
sampletype2=basename(file.paths) %>%
gsub(pat=".*blank.*",
rep="blank") %>%
gsub(pat=".*lam_omix.*|.*gh76.*",
rep="positive control") %>%
gsub(pat=".*fitdog.*",
rep="sample"),
rep=basename(file.paths) %>%
gsub(pat=".*rep2.*|.*-2-.*",
rep="B") %>%
gsub(pat=".*rep1.*|.*-1-.*",
rep="A"))
pheno.data = pheno.data[c(2,5,6),]
file.paths = file.paths[c(2,5,6)]
data = readMSData(files=file.paths,
pdata=new("NAnnotatedDataFrame", pheno.data),
mode="onDisk")
data.ms1 = data[data@featureData@data$msLevel == 1]
data.ms2 = data[data@featureData@data$msLevel == 2]
cwp = CentWaveParam(ppm=10,
peakwidth=c(10,100),
snthresh=10,
prefilter=c(3,5000))
pdp = PeakDensityParam(sampleGroups=data.ms1$sampletype1,
binSize=0.01,
bw=5)
pgp = predictGlycansParam(dp=c(1,6),
ESI_mode="pos",
scan_range=c(175, 2000),
label="procainamide",
modifications=c('unsaturated'))
data.ms1 = Dulce_AnnotateMS1(data.ms1,
cwp=cwp,
pdp=pdp,
pgp=pgp,
output="main",
polarity="positive",
mzabs=0.1)
data.ms1 = Dulce_AnnotateMS1(data,
cwp=cwp,
pdp=pdp,
pgp=pgp,
output="main",
polarity="positive",
mzabs=0.1)
data.ms1
#'
#' @export
#'
#' @details Dobie dobie doo diroo diroo
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#'
Dulce_AnnotateMS1 = function(data, cwp=NULL, pdp=NULL,
names=NULL, classes="Unclassified",
isotopes=T, adducts=T,
perfwhm=0.5, mzabs.find=0.01, cor_eic_th=0.75,
polarity=NULL,
rtmin=0, rtmax=Inf,
pgp=NULL, ppm=NULL, mzabs=NULL,
output = "all"){
data_all = list()
data_main = list()
if (!output %in% c("all", "main", "last")){
stop("Dulce error: 'output' argument not recognized. The options are 'all', 'main' or 'last'. See ?Dulce_AnnotateMS1 for more information.")
}
BiocParallel::register(SerialParam())
if (class(data) %in% c("OnDiskMSnExp","MSnExp")){
message("Dulce note: executing Dulce_fetch function. Bip Bop... Bip Bop...")
data = tryCatch(Dulce_fetch(data, cwp=cwp, pdp=pdp, return_everything=T),
error=function(e) {warning("Dulce_fetch() did not work due to following error:\n", e); data})
if (output == "all"){
data_all$peaks = data$peaks
data_all$features = data$features
data_all$XCMSnExp = data$data
data = data$data
} else if (output == "main"){
data_main$XCMSnExp = data$data
data = data$data
} else if (output == "last"){
data = data$data
}
} else {
message("Dulce warning: 'data' not from 'OnDiskMSnExp' or 'MSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_to_xcmsSet().")
}
if (class(data)=="XCMSnExp"){
message("Dulce note: executing Dulce_to_xcmsSet function. Diroo... Diroo Diroo... ")
data = tryCatch(Dulce_to_xcmsSet(data, names, classes),
error=function(e) {message("Dulce_to_xcms() did not work due to following error:\n", e); data})
if (output == "all"){data_all$xcmsSet = data}
} else {
message("Dulce warning: 'data' not from 'XCMSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_find()")
}
if (class(data)=="xcmsSet"){
message("Dulce note: executing Dulce_find function. Daroo bip... daroo bop... ")
message("Dulce rants: I dont like this functions :c It needs to be improved.")
data = tryCatch(Dulce_find(data, isotopes=isotopes, adducts=adducts,
perfwhm=perfwhm, mzabs=mzabs.find, cor_eic_th=cor_eic_th,
polarity=polarity),
error=function(e) {warning("Dulce_find() did not work due to following error:\n", e); data})
if (output == "all"){data_all$xsAnnotate = data}
} else {
message("Dulce warning: 'data' not from 'xcmsSet' class.")
message("Dulce warning: trying next step in pipeline, Dulce_trimIsotopes()")
}
if (class(data)=="xsAnnotate"){
message("Dulce note: executing Dulce_trimIsotopes function. Beep... clink...")
data = tryCatch(Dulce_trimIsotopes(data, rtmin=rtmin, rtmax=rtmax),
error=function(e) {warning("Dulce_trimIsotopes() did not work due to following error:\n", e); data})
if (output == "all"){data_all$trimmedIsotopes = data}
} else {
message("Dulce warning: 'data' not from 'xsAnnotate' class.")
message("Dulce warning: trying next step in pipeline, Dulce_annotate()")
}
if (class(data)=="data.frame"){
message("Dulce note: executing Dulce_annotate function. Wooosh! Birup... Birup... pa!")
data = tryCatch(Dulce_annotate(data, pgp=pgp, ppm=ppm, mzabs=mzabs),
error=function(e) {warning("Dulce_annotate() did not work due to following error:\n", e); data})
if (output == "all"){data_all$Annotated = data}
else if (output == "main"){data_main$Annotated = data}
} else {
message("Dulce warning: 'data' not even from 'data.frame' class. What did you give me?")
}
if (output == "all"){
message("Dulce note: returning a list with the product of all the steps I was able to do successfully.")
return(data_all)
} else if (output == "main"){
message("Dulce note: returning a list with an 'XCMSnExp' object (if possible) and the last achieved product.")
return(data_main)
} else if (output == "last"){
message("Dulce note: returning the last object I was able to produce.")
return(data)
}
}
data.ms1 = Dulce_AnnotateMS1(data,
cwp=cwp,
pdp=pdp,
pgp=pgp,
output="main",
polarity="positive",
mzabs=0.1)
#'
#' @export
#'
#' @details Dobie dobie doo diroo diroo
#'
#' @examples
#' # Examples have to be made with a toy data object.
#'
#' @seealso
#'
Dulce_AnnotateMS1 = function(data, cwp=NULL, pdp=NULL,
names=NULL, classes="Unclassified",
isotopes=T, adducts=T,
perfwhm=0.5, mzabs.find=0.01, cor_eic_th=0.75,
polarity=NULL,
rtmin=0, rtmax=Inf,
pgp=NULL, ppm=NULL, mzabs=NULL,
output = "all"){
data_all = list()
data_main = list()
if (!output %in% c("all", "main", "last")){
stop("Dulce error: 'output' argument not recognized. The options are 'all', 'main' or 'last'. See ?Dulce_AnnotateMS1 for more information.")
}
BiocParallel::register(SerialParam())
if (class(data) %in% c("OnDiskMSnExp","MSnExp")){
message("Dulce note: executing Dulce_fetch function. Bip Bop... Bip Bop...")
data = tryCatch(Dulce_fetch(data, cwp=cwp, pdp=pdp, return_everything=T),
error=function(e) {message("Dulce_fetch() did not work due to the following error:\n", e); data})
if (output == "all"){
data_all$peaks = data$peaks
data_all$features = data$features
data_all$XCMSnExp = data$data
data = data$data
} else if (output == "main"){
data_main$XCMSnExp = data$data
data = data$data
} else if (output == "last"){
data = data$data
}
} else {
message("Dulce warning: 'data' not from 'OnDiskMSnExp' or 'MSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_to_xcmsSet().")
}
if (class(data)=="XCMSnExp"){
message("Dulce note: executing Dulce_to_xcmsSet function. Diroo... Diroo Diroo... ")
data = tryCatch(Dulce_to_xcmsSet(data, names, classes),
error=function(e) {message("Dulce_to_xcms() did not work due to the following error:\n", e); data})
if (output == "all"){data_all$xcmsSet = data}
} else {
message("Dulce warning: 'data' not from 'XCMSnExp' class.")
message("Dulce warning: trying next step in pipeline, Dulce_find()")
}
if (class(data)=="xcmsSet"){
message("Dulce note: executing Dulce_find function. Daroo bip... daroo bop... ")
message("Dulce rants: I dont like this functions :c It needs to be improved.")
data = tryCatch(Dulce_find(data, isotopes=isotopes, adducts=adducts,
perfwhm=perfwhm, mzabs=mzabs.find, cor_eic_th=cor_eic_th,
polarity=polarity),
error=function(e) {message("Dulce_find() did not work due to the following error:\n", e); data})
if (output == "all"){data_all$xsAnnotate = data}
} else {
message("Dulce warning: 'data' not from 'xcmsSet' class.")
message("Dulce warning: trying next step in pipeline, Dulce_trimIsotopes()")
}
if (class(data)=="xsAnnotate"){
message("Dulce note: executing Dulce_trimIsotopes function. Beep... clink...")
data = tryCatch(Dulce_trimIsotopes(data, rtmin=rtmin, rtmax=rtmax),
error=function(e) {message("Dulce_trimIsotopes() did not work due to the following error:\n", e); data})
if (output == "all"){data_all$trimmedIsotopes = data}
} else {
message("Dulce warning: 'data' not from 'xsAnnotate' class.")
message("Dulce warning: trying next step in pipeline, Dulce_annotate()")
}
if (class(data)=="data.frame"){
message("Dulce note: executing Dulce_annotate function. Wooosh! Birup... Birup... pa!")
data = tryCatch(Dulce_annotate(data, pgp=pgp, ppm=ppm, mzabs=mzabs),
error=function(e) {message("Dulce_annotate() did not work due to the following error:\n", e); data})
if (output == "all"){data_all$Annotated = data}
else if (output == "main"){data_main$Annotated = data}
} else {
message("Dulce warning: 'data' not even from 'data.frame' class. What did you give me?")
}
if (output == "all"){
message("Dulce note: returning a list with the product of all the steps I was able to do successfully.")
return(data_all)
} else if (output == "main"){
message("Dulce note: returning a list with an 'XCMSnExp' object (if possible) and the last achieved product.")
return(data_main)
} else if (output == "last"){
message("Dulce note: returning the last object I was able to produce.")
return(data)
}
}
data.ms1 = Dulce_AnnotateMS1(data,
cwp=cwp,
pdp=pdp,
pgp=pgp,
output="main",
polarity="positive",
mzabs=0.1)
devtools::check()
setwd("C:/Users/ssilva/ownCloud/Lab rotations/R with Margot/Playground/R")
setwd("C:/Users/ssilva/ownCloud/Lab rotations/R with Margot/Dulce")
devtools::check()
library(devtools)
devtools::check()
devtools::document()
setwd("C:/Users/ssilva/ownCloud/Lab rotations/R with Margot/Dulce/R")
devtools::check()
devtools::
devtools
?check
check()
devtools::check()
devtools::check()
.rs.restartR()
install.packages("devtools")
devtools::check()
library(devtools)
devtools::check()
install.packages("pkgload")
devtools::check()
library(devtools)
.rs.restartR()
